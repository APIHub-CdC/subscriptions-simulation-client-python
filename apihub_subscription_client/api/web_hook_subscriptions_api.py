# coding: utf-8

"""
    API Subscriptions Sandbox

    This API lets you manage the subscriptions to API Hub asynchronous events. It enables you to receive notifications (asynchronous events) from Círculo de Crédito next-generation products (Open Banking & Data Aggregation).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: api@circulodecredito.com.mx
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from apihub_subscription_client.api_client import ApiClient


class WebHookSubscriptionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_subscription(self, x_api_key, subscription_id, **kwargs):  # noqa: E501
        """Withdraws a subscription.  # noqa: E501

        Withdraws the subscription identified by the {subscriptionId} path parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_subscription(x_api_key, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param str subscription_id: Subscription identifier. (required)
        :return: SubscriptionAcknowledge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_subscription_with_http_info(x_api_key, subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subscription_with_http_info(x_api_key, subscription_id, **kwargs)  # noqa: E501
            return data

    def delete_subscription_with_http_info(self, x_api_key, subscription_id, **kwargs):  # noqa: E501
        """Withdraws a subscription.  # noqa: E501

        Withdraws the subscription identified by the {subscriptionId} path parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_subscription_with_http_info(x_api_key, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param str subscription_id: Subscription identifier. (required)
        :return: SubscriptionAcknowledge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `delete_subscription`")  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `delete_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/subscriptions/{subscriptionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriptionAcknowledge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subscription(self, x_api_key, subscription_id, **kwargs):  # noqa: E501
        """Returns the subscription information.  # noqa: E501

        Returns the subscription information identified by the {subscriptionId} path parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscription(x_api_key, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param str subscription_id: Subscription identifier. (required)
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_subscription_with_http_info(x_api_key, subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subscription_with_http_info(x_api_key, subscription_id, **kwargs)  # noqa: E501
            return data

    def get_subscription_with_http_info(self, x_api_key, subscription_id, **kwargs):  # noqa: E501
        """Returns the subscription information.  # noqa: E501

        Returns the subscription information identified by the {subscriptionId} path parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscription_with_http_info(x_api_key, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param str subscription_id: Subscription identifier. (required)
        :return: Subscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_subscription`")  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params or
                params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `get_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_id' in params:
            path_params['subscriptionId'] = params['subscription_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/subscriptions/{subscriptionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Subscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subscriptions(self, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of subscriptions you are enrolled in.  # noqa: E501

        Returns a subscription list. The maximum number of returned rows is 20. You could use the {page} and {perPage} parameters in order to navigate through the list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscriptions(x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param str page: Page to query.
        :param str per_page: Rows per page.
        :return: SubscriptionsMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_subscriptions_with_http_info(x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subscriptions_with_http_info(x_api_key, **kwargs)  # noqa: E501
            return data

    def get_subscriptions_with_http_info(self, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of subscriptions you are enrolled in.  # noqa: E501

        Returns a subscription list. The maximum number of returned rows is 20. You could use the {page} and {perPage} parameters in order to navigate through the list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscriptions_with_http_info(x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param str page: Page to query.
        :param str per_page: Rows per page.
        :return: SubscriptionsMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `get_subscriptions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('perPage', params['per_page']))  # noqa: E501

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriptionsMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_subscription(self, x_api_key, enrollment, **kwargs):  # noqa: E501
        """Enrolls you in a product subscription.  # noqa: E501

        Creates a new subscription. You must provide the type of event you are interested in, the URL endpoint of your WebHook API and your enrollment identifier. Note: In the Sandbox Environment the subscriptions will be stored for a maximum period of 24 hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_subscription(x_api_key, enrollment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param Subscription enrollment: Enrollment information (required)
        :param str x_webhook_jwt_auth: Json Web Token that contains the username and password required to invoke your WebHook API published with Basic Authentication.
        :return: SubscriptionAcknowledge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_subscription_with_http_info(x_api_key, enrollment, **kwargs)  # noqa: E501
        else:
            (data) = self.post_subscription_with_http_info(x_api_key, enrollment, **kwargs)  # noqa: E501
            return data

    def post_subscription_with_http_info(self, x_api_key, enrollment, **kwargs):  # noqa: E501
        """Enrolls you in a product subscription.  # noqa: E501

        Creates a new subscription. You must provide the type of event you are interested in, the URL endpoint of your WebHook API and your enrollment identifier. Note: In the Sandbox Environment the subscriptions will be stored for a maximum period of 24 hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_subscription_with_http_info(x_api_key, enrollment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The Consumer Key assigned to the client application you have registered in API Hub. (required)
        :param Subscription enrollment: Enrollment information (required)
        :param str x_webhook_jwt_auth: Json Web Token that contains the username and password required to invoke your WebHook API published with Basic Authentication.
        :return: SubscriptionAcknowledge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'enrollment', 'x_webhook_jwt_auth']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `post_subscription`")  # noqa: E501
        # verify the required parameter 'enrollment' is set
        if ('enrollment' not in params or
                params['enrollment'] is None):
            raise ValueError("Missing the required parameter `enrollment` when calling `post_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['x-api-key'] = params['x_api_key']  # noqa: E501
        if 'x_webhook_jwt_auth' in params:
            header_params['x-webhook-jwt-auth'] = params['x_webhook_jwt_auth']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'enrollment' in params:
            body_params = params['enrollment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriptionAcknowledge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
