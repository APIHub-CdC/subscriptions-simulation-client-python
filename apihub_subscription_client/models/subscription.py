# coding: utf-8

"""
    API Subscriptions Sandbox

    This API lets you manage the subscriptions to API Hub asynchronous events. It enables you to receive notifications (asynchronous events) from Círculo de Crédito next-generation products (Open Banking & Data Aggregation).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: api@circulodecredito.com.mx
"""


import pprint
import re  # noqa: F401

import six


class Subscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_type': 'str',
        'web_hook_url': 'str',
        'enrollment_id': 'str',
        'subscription_id': 'str',
        'date_time': 'datetime'
    }

    attribute_map = {
        'event_type': 'eventType',
        'web_hook_url': 'webHookUrl',
        'enrollment_id': 'enrollmentId',
        'subscription_id': 'subscriptionId',
        'date_time': 'dateTime'
    }

    def __init__(self, event_type=None, web_hook_url=None, enrollment_id=None, subscription_id=None, date_time=None):  # noqa: E501
        """Subscription - a model defined in Swagger"""  # noqa: E501

        self._event_type = None
        self._web_hook_url = None
        self._enrollment_id = None
        self._subscription_id = None
        self._date_time = None
        self.discriminator = None

        self.event_type = event_type
        self.web_hook_url = web_hook_url
        self.enrollment_id = enrollment_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if date_time is not None:
            self.date_time = date_time

    @property
    def event_type(self):
        """Gets the event_type of this Subscription.  # noqa: E501

        Event type you are interested in.  # noqa: E501

        :return: The event_type of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Subscription.

        Event type you are interested in.  # noqa: E501

        :param event_type: The event_type of this Subscription.  # noqa: E501
        :type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501

        self._event_type = event_type

    @property
    def web_hook_url(self):
        """Gets the web_hook_url of this Subscription.  # noqa: E501

        The URL which will receive API Hub event notifications.  # noqa: E501

        :return: The web_hook_url of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._web_hook_url

    @web_hook_url.setter
    def web_hook_url(self, web_hook_url):
        """Sets the web_hook_url of this Subscription.

        The URL which will receive API Hub event notifications.  # noqa: E501

        :param web_hook_url: The web_hook_url of this Subscription.  # noqa: E501
        :type: str
        """
        if web_hook_url is None:
            raise ValueError("Invalid value for `web_hook_url`, must not be `None`")  # noqa: E501

        self._web_hook_url = web_hook_url

    @property
    def enrollment_id(self):
        """Gets the enrollment_id of this Subscription.  # noqa: E501

        Your enrollment identifier to associate with the subscription identifier (UUID v4).  # noqa: E501

        :return: The enrollment_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_id

    @enrollment_id.setter
    def enrollment_id(self, enrollment_id):
        """Sets the enrollment_id of this Subscription.

        Your enrollment identifier to associate with the subscription identifier (UUID v4).  # noqa: E501

        :param enrollment_id: The enrollment_id of this Subscription.  # noqa: E501
        :type: str
        """
        if enrollment_id is None:
            raise ValueError("Invalid value for `enrollment_id`, must not be `None`")  # noqa: E501

        self._enrollment_id = enrollment_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this Subscription.  # noqa: E501

        Subscription identifier (UUID v4).  # noqa: E501

        :return: The subscription_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this Subscription.

        Subscription identifier (UUID v4).  # noqa: E501

        :param subscription_id: The subscription_id of this Subscription.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def date_time(self):
        """Gets the date_time of this Subscription.  # noqa: E501

        Date and time when the subscription was created. As defined by date-time - RFC3339.  # noqa: E501

        :return: The date_time of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this Subscription.

        Date and time when the subscription was created. As defined by date-time - RFC3339.  # noqa: E501

        :param date_time: The date_time of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._date_time = date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Subscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
