# coding: utf-8

"""
    API Subscriptions Sandbox

    This API lets you manage the subscriptions to API Hub asynchronous events. It enables you to receive notifications (asynchronous events) from Círculo de Crédito next-generation products (Open Banking & Data Aggregation).  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: api@circulodecredito.com.mx
"""


import pprint
import re  # noqa: F401

import six


class SubscriptionAcknowledge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acknowledge_id': 'str',
        'date_time': 'datetime',
        'operation': 'str',
        'message': 'str',
        'subscription': 'Subscription'
    }

    attribute_map = {
        'acknowledge_id': 'acknowledgeId',
        'date_time': 'dateTime',
        'operation': 'operation',
        'message': 'message',
        'subscription': 'subscription'
    }

    def __init__(self, acknowledge_id=None, date_time=None, operation=None, message=None, subscription=None):  # noqa: E501
        """SubscriptionAcknowledge - a model defined in Swagger"""  # noqa: E501

        self._acknowledge_id = None
        self._date_time = None
        self._operation = None
        self._message = None
        self._subscription = None
        self.discriminator = None

        if acknowledge_id is not None:
            self.acknowledge_id = acknowledge_id
        if date_time is not None:
            self.date_time = date_time
        if operation is not None:
            self.operation = operation
        if message is not None:
            self.message = message
        if subscription is not None:
            self.subscription = subscription

    @property
    def acknowledge_id(self):
        """Gets the acknowledge_id of this SubscriptionAcknowledge.  # noqa: E501

        The acknowledge identifier (UUID v4).  # noqa: E501

        :return: The acknowledge_id of this SubscriptionAcknowledge.  # noqa: E501
        :rtype: str
        """
        return self._acknowledge_id

    @acknowledge_id.setter
    def acknowledge_id(self, acknowledge_id):
        """Sets the acknowledge_id of this SubscriptionAcknowledge.

        The acknowledge identifier (UUID v4).  # noqa: E501

        :param acknowledge_id: The acknowledge_id of this SubscriptionAcknowledge.  # noqa: E501
        :type: str
        """

        self._acknowledge_id = acknowledge_id

    @property
    def date_time(self):
        """Gets the date_time of this SubscriptionAcknowledge.  # noqa: E501

        Date and time when the acknowledge was sent. As defined by date-time - RFC3339.  # noqa: E501

        :return: The date_time of this SubscriptionAcknowledge.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this SubscriptionAcknowledge.

        Date and time when the acknowledge was sent. As defined by date-time - RFC3339.  # noqa: E501

        :param date_time: The date_time of this SubscriptionAcknowledge.  # noqa: E501
        :type: datetime
        """

        self._date_time = date_time

    @property
    def operation(self):
        """Gets the operation of this SubscriptionAcknowledge.  # noqa: E501

        Subscription activity.  # noqa: E501

        :return: The operation of this SubscriptionAcknowledge.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this SubscriptionAcknowledge.

        Subscription activity.  # noqa: E501

        :param operation: The operation of this SubscriptionAcknowledge.  # noqa: E501
        :type: str
        """
        allowed_values = ["enrollment", "cancellation"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def message(self):
        """Gets the message of this SubscriptionAcknowledge.  # noqa: E501

        Descriptive and human-readable message.  # noqa: E501

        :return: The message of this SubscriptionAcknowledge.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SubscriptionAcknowledge.

        Descriptive and human-readable message.  # noqa: E501

        :param message: The message of this SubscriptionAcknowledge.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def subscription(self):
        """Gets the subscription of this SubscriptionAcknowledge.  # noqa: E501


        :return: The subscription of this SubscriptionAcknowledge.  # noqa: E501
        :rtype: Subscription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this SubscriptionAcknowledge.


        :param subscription: The subscription of this SubscriptionAcknowledge.  # noqa: E501
        :type: Subscription
        """

        self._subscription = subscription

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionAcknowledge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionAcknowledge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
